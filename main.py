import sys
import os
from PyQt5 import QtWidgets, uic, QtCore, QtGui
from PyQt5.QtWidgets import QMainWindow, QApplication, QMessageBox, QVBoxLayout, QHBoxLayout, QLabel, QListWidget, QProgressBar, QTextEdit, QPlainTextEdit, QDialog, QLineEdit, QComboBox, QPushButton, QSpinBox
from PyQt5.QtCore import QTimer, pyqtSignal
import random
import datetime
from mavlink_connection import MAVLinkConnection

class DroneControlApp(QMainWindow):
    def __init__(self):
        super().__init__()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º UI —Ñ–∞–π–ª
        ui_file = os.path.join(os.path.dirname(__file__), 'UI_HUD.ui')
        uic.loadUi(ui_file, self)
        
        # –°–∫—Ä—ã–≤–∞–µ–º –ø—Ä–æ–±–ª–µ–º–Ω—ã–π statusLabel —Å —á–µ—Ä–Ω—ã–º —Ç–µ–∫—Å—Ç–æ–º
        if hasattr(self, 'statusLabel'):
            self.statusLabel.hide()
        
        # –Ü–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
        self.connected = False
        self.drones_list = []
        self.connected_drones = []  # –°–ø–∏—Å–æ–∫ –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –¥—Ä–æ–Ω—ñ–≤
        self.selected_drone = None  # –í—ã–±—Ä–∞–Ω–Ω—ã–π –¥—Ä–æ–Ω –∏–∑ —Å–ø–∏—Å–∫–∞
        self.simulated_armed = False  # –°—Ç–∞—Ç—É—Å –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è –≤ —Ä–µ–∂–∏–º–µ —Å–∏–º—É–ª—è—Ü–∏–∏
        self.current_status = "–ì–æ—Ç–æ–≤–∏–π"
        self.battery_display_mode = "percent"  # "percent" –∞–±–æ "voltage"
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è MAVLink —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        self.mavlink = MAVLinkConnection()
        self.setup_mavlink_signals()
        
        # –†–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
        self.real_telemetry = False  # –§–ª–∞–≥ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π —Å–∏–≥–Ω–∞–ª–æ–≤
        self.setup_connections()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.setup_interface()
        
        # –¢–∞–π–º–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_telemetry)
        
        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞
        self.update_status("–ì–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.update_connection_indicator(False)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ ARM/DISARM (—Ä–∞–∑–æ—Ä—É–∂–µ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)
        QtCore.QTimer.singleShot(500, self.initialize_ui_state)
    
    def initialize_ui_state(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è UI –ø–æ—Å–ª–µ –ø–æ–ª–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏"""
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–Ω–æ–ø–æ–∫ ARM/DISARM
        if hasattr(self, 'armButton') and hasattr(self, 'disarmButton'):
            self.add_log("üîß –ö–Ω–æ–ø–∫–∏ ARM/DISARM –∑–Ω–∞–π–¥–µ–Ω–æ —Ç–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–æ")
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Å—Ç–∏–ª–∏ –∫–Ω–æ–ø–æ–∫
            self.setup_button_styles()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤ –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞)
            self.enable_arm_disarm_buttons(False)
        else:
            self.add_log("‚ùå –ü–û–ú–ò–õ–ö–ê: –ö–Ω–æ–ø–∫–∏ ARM/DISARM –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    
    def setup_button_styles(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤—ã—Ö —Å—Ç–∏–ª–µ–π –∫–Ω–æ–ø–æ–∫"""
        # –°—Ç–∏–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ ARM (–∑–µ–ª–µ–Ω–∞—è)
        self.arm_active_style = """
            QPushButton {
                background-color: #2e7d32 !important;
                color: white !important;
                border: none !important;
                border-radius: 8px !important;
                padding: 8px 16px !important;
                font-size: 12pt !important;
                font-weight: bold !important;
            }
            QPushButton:hover {
                background-color: #388e3c !important;
            }
            QPushButton:pressed {
                background-color: #1b5e20 !important;
            }
        """
        
        # –°—Ç–∏–ª—å –∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ DISARM (–∫—Ä–∞—Å–Ω–∞—è)
        self.disarm_active_style = """
            QPushButton {
                background-color: #d32f2f !important;
                color: white !important;
                border: none !important;
                border-radius: 8px !important;
                padding: 8px 16px !important;
                font-size: 12pt !important;
                font-weight: bold !important;
            }
            QPushButton:hover {
                background-color: #f44336 !important;
            }
            QPushButton:pressed {
                background-color: #b71c1c !important;
            }
        """
        
        # –°—Ç–∏–ª—å –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π –∫–Ω–æ–ø–∫–∏ (—Å–µ—Ä–∞—è)
        self.inactive_style = """
            QPushButton {
                background-color: #424242 !important;
                color: #9e9e9e !important;
                border: none !important;
                border-radius: 8px !important;
                padding: 8px 16px !important;
                font-size: 12pt !important;
                font-weight: bold !important;
            }
        """
            
    def setup_mavlink_signals(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ MAVLink"""
        self.mavlink.telemetry_updated.connect(self.update_real_telemetry)
        self.mavlink.connection_status_changed.connect(self.on_mavlink_connection_changed)
        self.mavlink.message_received.connect(self.add_log)
        
    def setup_connections(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π –∫–Ω–æ–ø–æ–∫ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏"""
        # –ö–Ω–æ–ø–∫–∏ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è (–∏—Å–ø—Ä–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –∫–Ω–æ–ø–æ–∫ —Å–æ–≥–ª–∞—Å–Ω–æ UI)
        self.stopButton.clicked.connect(self.connect_drone)  # "–ü—ñ–¥–∫–ª—é—á–∏—Ç–∏"
        self.connectButton.clicked.connect(self.disconnect_drone)  # "–í—ñ–¥–∫–ª—é—á–∏—Ç–∏" 
        self.startButton.clicked.connect(self.quick_connect_drone)  # "üöÅ –®–≤–∏–¥–∫–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è"
        
        # –ö–Ω–æ–ø–∫–∏ ARM/DISARM
        self.armButton.clicked.connect(self.arm_drone)  # "ARM"
        self.disarmButton.clicked.connect(self.disarm_drone)  # "DISARM"
        
        # –ö–Ω–æ–ø–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
        self.settingsButton.clicked.connect(self.open_settings)
        
    def setup_interface(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ –ª–µ–≤—É—é –ø–∞–Ω–µ–ª—å (–¢–µ–ª–µ–º–µ—Ç—Ä–∏—è)
        self.setup_telemetry_panel()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ —Ü–µ–Ω—Ç—Ä–∞–ª—å–Ω—É—é –ø–∞–Ω–µ–ª—å (–°–ø–∏—Å–æ–∫ –¥—Ä–æ–Ω–æ–≤)
        self.setup_drones_panel()
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–¥–∂–µ—Ç—ã –≤ –ø—Ä–∞–≤—É—é –ø–∞–Ω–µ–ª—å (–ù–∞—Å—Ç—Ä–æ–π–∫–∏)
        self.setup_settings_panel()
        
    def setup_telemetry_panel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏"""
        # –°–æ–∑–¥–∞–µ–º –≤–∏–¥–∂–µ—Ç—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
        self.telemetry_layout = QVBoxLayout()
        
        # –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        self.connection_status_button = QtWidgets.QPushButton("‚óè –í–Ü–î–ö–õ–Æ–ß–ï–ù–û")
        self.connection_status_button.setStyleSheet("""
            QPushButton {
                background-color: #d32f2f;
                color: white;
                border: none;
                border-radius: 8px;
                padding: 10px 15px;
                font-size: 14pt;
                font-weight: bold;
                margin: 5px;
                max-width: 180px;
                min-width: 140px;
            }
        """)
        self.connection_status_button.setEnabled(False)  # –î–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –Ω–µ–∞–∫—Ç–∏–≤–Ω–æ–π (—Ç–æ–ª—å–∫–æ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä)
        
        # –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        self.coord_label = QLabel("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: –ù/–î")
        self.coord_label.setStyleSheet("color: #dbe7f3; font-size: 12pt; margin: 5px;")
        
        # –í—ã—Å–æ—Ç–∞
        self.altitude_label = QLabel("–í–∏—Å–æ—Ç–∞: –ù/–î")
        self.altitude_label.setStyleSheet("color: #dbe7f3; font-size: 12pt; margin: 5px;")
        
        # –°–∫–æ—Ä–æ—Å—Ç—å
        self.speed_label = QLabel("–®–≤–∏–¥–∫—ñ—Å—Ç—å: –ù/–î")
        self.speed_label.setStyleSheet("color: #dbe7f3; font-size: 12pt; margin: 5px;")
        
        # –ë–∞—Ç–∞—Ä–µ—è
        self.battery_label = QLabel("–ë–∞—Ç–∞—Ä–µ—è:")
        self.battery_label.setStyleSheet("color: #dbe7f3; font-size: 12pt; margin: 5px;")
        
        # –ö–Ω–æ–ø–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞ –±–∞—Ç–∞—Ä–µ–∏
        self.battery_mode_button = QtWidgets.QPushButton("% ‚Üí V")
        self.battery_mode_button.setStyleSheet("""
            QPushButton {
                background-color: #1e2a30;
                color: #dbe7f3;
                border: 1px solid rgba(255,255,255,0.1);
                border-radius: 6px;
                padding: 4px 8px;
                font-size: 10pt;
                margin: 2px;
            }
            QPushButton:hover {
                background-color: #26343d;
            }
        """)
        self.battery_mode_button.clicked.connect(self.toggle_battery_mode)
        
        self.battery_progress = QProgressBar()
        self.battery_progress.setStyleSheet("""
            QProgressBar {
                border: 2px solid rgba(255,255,255,0.1);
                border-radius: 5px;
                background-color: rgba(20,28,33,0.7);
                text-align: center;
                color: #dbe7f3;
            }
            QProgressBar::chunk {
                background-color: #4CAF50;
                border-radius: 3px;
            }
        """)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        telemetry_container = QtWidgets.QWidget()
        telemetry_container.setGeometry(12, 50, 350, 450)
        telemetry_container.setParent(self.leftPanel)
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –±–∞—Ç–∞—Ä–µ–∏
        battery_container = QtWidgets.QWidget()
        battery_layout = QHBoxLayout(battery_container)
        battery_layout.setContentsMargins(0, 0, 0, 0)
        battery_layout.addWidget(self.battery_label)
        battery_layout.addWidget(self.battery_mode_button)
        battery_layout.addStretch()
        
        # –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (—Ü–µ–Ω—Ç—Ä–∏—Ä—É–µ–º)
        connection_container = QtWidgets.QWidget()
        connection_layout = QHBoxLayout(connection_container)
        connection_layout.setContentsMargins(0, 0, 0, 0)
        connection_layout.addStretch()
        connection_layout.addWidget(self.connection_status_button)
        connection_layout.addStretch()
        
        layout = QVBoxLayout(telemetry_container)
        layout.addWidget(connection_container)
        layout.addWidget(self.coord_label)
        layout.addWidget(self.altitude_label)
        layout.addWidget(self.speed_label)
        layout.addWidget(battery_container)
        layout.addWidget(self.battery_progress)
        layout.addStretch()
        
    def setup_drones_panel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ —Å–ø–∏—Å–∫–∞ –¥—Ä–æ–Ω–æ–≤"""
        # –°–ø–∏—Å–æ–∫ –¥—Ä–æ–Ω–æ–≤
        self.drones_list_widget = QListWidget()
        self.drones_list_widget.setGeometry(12, 50, 350, 400)
        self.drones_list_widget.setParent(self.centerPanel)
        self.drones_list_widget.setStyleSheet("""
            QListWidget {
                background-color: rgba(30,42,48,0.7);
                border: 1px solid rgba(255,255,255,0.1);
                border-radius: 8px;
                color: #dbe7f3;
                font-size: 12pt;
                padding: 5px;
            }
            QListWidget::item {
                padding: 8px;
                border-bottom: 1px solid rgba(255,255,255,0.05);
            }
            QListWidget::item:selected {
                background-color: rgba(70,130,180,0.3);
            }
        """)
        
        # –î–æ–¥–∞—î–º–æ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–∏–π —Ç–µ–∫—Å—Ç –∑–∞–º—ñ—Å—Ç—å —Ç–µ—Å—Ç–æ–≤–∏—Ö –¥—Ä–æ–Ω—ñ–≤
        self.update_drones_list()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã–±–æ—Ä–∞ –¥—Ä–æ–Ω–∞
        self.drones_list_widget.itemSelectionChanged.connect(self.on_drone_selected)
        
    def setup_settings_panel(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞–Ω–µ–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫"""
        # –¢–µ–ø–µ—Ä—å –ª–æ–≥–∏ –≤—Å—Ç—Ä–æ–µ–Ω—ã –≤ UI —á–µ—Ä–µ–∑ logsTextEdit - –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        self.add_log("–°–∏—Å—Ç–µ–º–∞ —ñ–Ω—ñ—Ü—ñ–∞–ª—ñ–∑–æ–≤–∞–Ω–∞")
        
    def update_drones_list(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Å–ø–∏—Å–∫—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –¥—Ä–æ–Ω—ñ–≤"""
        self.drones_list_widget.clear()
        
        if not self.connected_drones:
            # –Ø–∫—â–æ –Ω–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –¥—Ä–æ–Ω—ñ–≤
            info_item = QtWidgets.QListWidgetItem("üîç –ù–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö –¥—Ä–æ–Ω—ñ–≤")
            info_item.setFlags(info_item.flags() & ~QtCore.Qt.ItemIsSelectable)
            self.drones_list_widget.addItem(info_item)
            
            help_item = QtWidgets.QListWidgetItem("üí° –ü—ñ–¥–∫–ª—é—á—ñ—Ç—å—Å—è –¥–æ –¥—Ä–æ–Ω–∞ –¥–ª—è –ø–µ—Ä–µ–≥–ª—è–¥—É")
            help_item.setFlags(help_item.flags() & ~QtCore.Qt.ItemIsSelectable)
            self.drones_list_widget.addItem(help_item)
        else:
            # –î–æ–¥–∞—î–º–æ –ø—ñ–¥–∫–ª—é—á–µ–Ω—ñ –¥—Ä–æ–Ω–∏
            for drone in self.connected_drones:
                self.drones_list_widget.addItem(drone)
                
    def add_connected_drone(self, drone_info):
        """–î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞ –¥–æ —Å–ø–∏—Å–∫—É"""
        if drone_info not in self.connected_drones:
            self.connected_drones.append(drone_info)
            self.update_drones_list()
            self.add_log(f"‚úÖ –î—Ä–æ–Ω –¥–æ–¥–∞–Ω–æ –¥–æ —Å–ø–∏—Å–∫—É: {drone_info}")
            
            # –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–π –¥—Ä–æ–Ω
            self.selected_drone = drone_info
            self.add_log(f"üéØ –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ –≤–∏–±—Ä–∞–Ω–æ –¥—Ä–æ–Ω: {drone_info}")
            
            # –í—ã–¥–µ–ª—è–µ–º –¥—Ä–æ–Ω –≤ —Å–ø–∏—Å–∫–µ
            for i in range(self.drones_list_widget.count()):
                item = self.drones_list_widget.item(i)
                if item.text() == drone_info:
                    self.drones_list_widget.setCurrentItem(item)
                    break
            
            # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ ARM/DISARM –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞
            self.enable_arm_disarm_buttons(True)
            
    def remove_connected_drone(self, drone_info):
        """–í–∏–¥–∞–ª–µ–Ω–Ω—è –¥—Ä–æ–Ω–∞ –∑—ñ —Å–ø–∏—Å–∫—É"""
        if drone_info in self.connected_drones:
            self.connected_drones.remove(drone_info)
            self.update_drones_list()
            self.add_log(f"‚ùå –î—Ä–æ–Ω –≤–∏–¥–∞–ª–µ–Ω–æ –∑—ñ —Å–ø–∏—Å–∫—É: {drone_info}")
            
    def on_drone_selected(self):
        """–û–±—Ä–æ–±–∫–∞ –≤–∏–±–æ—Ä—É –¥—Ä–æ–Ω–∞"""
        selected_items = self.drones_list_widget.selectedItems()
        if selected_items:
            drone_name = selected_items[0].text()
            
            # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ —á–∏ —Ü–µ —Ä–µ–∞–ª—å–Ω–∏–π –¥—Ä–æ–Ω (–Ω–µ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è)
            if drone_name.startswith("üöÅ"):
                self.add_log(f"‚úÖ –í–∏–±—Ä–∞–Ω–æ –¥—Ä–æ–Ω: {drone_name}")
                self.selected_drone = drone_name
                
                # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ ARM/DISARM –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞
                self.add_log("üîß –ê–∫—Ç–∏–≤—É—î–º–æ –∫–Ω–æ–ø–∫–∏ ARM/DISARM...")
                self.enable_arm_disarm_buttons(True)
                
                if self.connected:
                    self.add_log(f"‚úÖ –ê–∫—Ç–∏–≤–Ω–∏–π –¥—Ä–æ–Ω –∑ MAVLink: {drone_name}")
                    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ, –æ–±–Ω–æ–≤–ª—è–µ–º —Å–æ–≥–ª–∞—Å–Ω–æ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
                    telemetry = self.mavlink.get_telemetry()
                    self.update_arm_buttons_state(telemetry.get('armed', False))
                else:
                    self.add_log(f"üì± –î—Ä–æ–Ω –≤–∏–±—Ä–∞–Ω–æ (—Å–∏–º—É–ª—è—Ü—ñ—è): {drone_name}")
                    # –ï—Å–ª–∏ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Å–∏–º—É–ª—è—Ü–∏–∏
                    self.update_arm_buttons_state(self.simulated_armed)
            else:
                # –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ–π–Ω—ñ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –Ω–µ –æ–±—Ä–æ–±–ª—è—î–º–æ
                self.selected_drone = None
                self.enable_arm_disarm_buttons(False)
        else:
            # –ù–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ
            self.selected_drone = None
            self.enable_arm_disarm_buttons(False)
                
    def toggle_battery_mode(self):
        """–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–∞—Ç–∞—Ä–µ–∏"""
        if self.battery_display_mode == "percent":
            self.battery_display_mode = "voltage"
            self.battery_mode_button.setText("V ‚Üí %")
            self.add_log("–†–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞—Ç–∞—Ä–µ—ó: –í–æ–ª—å—Ç–∏")
        else:
            self.battery_display_mode = "percent"
            self.battery_mode_button.setText("% ‚Üí V")
            self.add_log("–†–µ–∂–∏–º –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –±–∞—Ç–∞—Ä–µ—ó: –ü—Ä–æ—Ü–µ–Ω—Ç–∏")
    
    def quick_connect_drone(self):
        """–ë—ã—Å—Ç—Ä–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥—Ä–æ–Ω—É —Å –¥–µ—Ñ–æ–ª—Ç–Ω—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏"""
        if not self.connected:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ—Ñ–æ–ª—Ç–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: TCP 192.168.1.118:5760
            protocol, host, port = "TCP", "192.168.1.118", 5760
            
            self.mavlink.set_connection_params(protocol, host, port)
            self.update_status("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –¥—Ä–æ–Ω–∞...")
            self.add_log(f"üöÅ –®–≤–∏–¥–∫–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –¥—Ä–æ–Ω–∞ {host}:{port}...")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
            if self.mavlink.connect():
                self.connected = True
                self.real_telemetry = True
                
                # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ü–û–°–õ–ï —É—Å—Ç–∞–Ω–æ–≤–∫–∏ connected
                self.update_connection_indicator(True)
                # –¢–∞–π–º–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω—É–∂–µ–Ω
                self.timer.stop()
                self.update_status("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ –¥–æ –¥—Ä–æ–Ω–∞")
                self.add_log("‚úÖ –®–≤–∏–¥–∫–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                
                # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ARM/DISARM (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–æ—Ä—É–∂–µ–Ω)
                self.update_arm_buttons_state(False)
                
                # –î–æ–¥–∞—î–º–æ –¥—Ä–æ–Ω –¥–æ —Å–ø–∏—Å–∫—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö
                drone_name = f"üöÅ –î—Ä–æ–Ω ({protocol}://{host}:{port})"
                self.add_connected_drone(drone_name)
            else:
                self.connected = False
                self.real_telemetry = False
                self.update_connection_indicator(False)
                self.update_status("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
                self.add_log("‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –ø—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è –¥–æ –¥—Ä–æ–Ω–∞")
        else:
            self.add_log("‚ö†Ô∏è –î—Ä–æ–Ω —É–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!")
            
    def connect_drone(self):
        """–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –¥—Ä–æ–Ω–∞"""
        if not self.connected:
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∏–∞–ª–æ–≥ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            connection_dialog = ConnectionDialog(self)
            if connection_dialog.exec_() == QDialog.Accepted:
                protocol, host, port = connection_dialog.get_connection_params()
                
                self.mavlink.set_connection_params(protocol, host, port)
                self.update_status("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è...")
                self.add_log("–°–ø—Ä–æ–±–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –¥—Ä–æ–Ω–∞...")
                
                # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è
                if self.mavlink.connect():
                    self.connected = True
                    self.real_telemetry = True
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ü–û–°–õ–ï —É—Å—Ç–∞–Ω–æ–≤–∫–∏ connected
                    self.update_connection_indicator(True)
                    # –¢–∞–π–º–µ—Ä –¥–ª—è —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω—É–∂–µ–Ω
                    self.timer.stop()
                    self.update_status("–ü—ñ–¥–∫–ª—é—á–µ–Ω–æ")
                    self.add_log("–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
                    
                    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ARM/DISARM (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Ä–∞–∑–æ—Ä—É–∂–µ–Ω)
                    self.update_arm_buttons_state(False)
                    
                    # –î–æ–¥–∞—î–º–æ –¥—Ä–æ–Ω –¥–æ —Å–ø–∏—Å–∫—É –ø—ñ–¥–∫–ª—é—á–µ–Ω–∏—Ö
                    drone_name = f"üöÅ –î—Ä–æ–Ω ({protocol}://{host}:{port})"
                    self.add_connected_drone(drone_name)
                else:
                    self.connected = False
                    self.real_telemetry = False
                    self.update_connection_indicator(False)
                    self.update_status("–ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
        else:
            self.add_log("–í–∂–µ –ø—ñ–¥–∫–ª—é—á–µ–Ω–æ!")
            
    def disconnect_drone(self):
        """–í—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—ñ–¥ –¥—Ä–æ–Ω–∞"""
        if self.connected:
            self.connected = False
            self.real_telemetry = False
            
            # –û—Ç–∫–ª—é—á–∞–µ–º—Å—è –æ—Ç MAVLink
            self.mavlink.disconnect()
            
            # –í–∏–¥–∞–ª—è—î–º–æ –≤—Å—ñ –¥—Ä–æ–Ω–∏ –∑—ñ —Å–ø–∏—Å–∫—É –ø—Ä–∏ –≤—ñ–¥–∫–ª—é—á–µ–Ω–Ω—ñ
            self.connected_drones.clear()
            self.selected_drone = None  # –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥—Ä–æ–Ω
            self.update_drones_list()
            
            # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫–∏ ARM/DISARM
            self.enable_arm_disarm_buttons(False)
            
            self.update_status("–í—ñ–¥–∫–ª—é—á–µ–Ω–æ")
            self.add_log("–í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ —Å–∏—Å—Ç–µ–º–∏")
            
            # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
            self.update_connection_indicator(False)
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            self.timer.start(1000)
            
            # –°–±—Ä–æ—Å —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
            self.coord_label.setText("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: –ù/–î")
            self.altitude_label.setText("–í–∏—Å–æ—Ç–∞: –ù/–î")
            self.speed_label.setText("–®–≤–∏–¥–∫—ñ—Å—Ç—å: –ù/–î")
            self.battery_progress.setValue(0)
            
    def check_system(self):
        """–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏"""
        self.update_status("–ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º–∏...")
        self.add_log("–ó–∞–ø—É—Å–∫ –¥—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ —Å–∏—Å—Ç–µ–º–∏...")
        
        # –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
        QtCore.QTimer.singleShot(3000, self.system_check_complete)
        
    def system_check_complete(self):
        """–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º–∏"""
        status = "–°–∏—Å—Ç–µ–º–∞ –≤ –Ω–æ—Ä–º—ñ" if random.choice([True, False, True]) else "–í–∏—è–≤–ª–µ–Ω–æ –ø—Ä–æ–±–ª–µ–º–∏"
        self.update_status(status)
        self.add_log(f"–î—ñ–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {status}")
        
    def arm_drone(self):
        """–í–æ–æ—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–æ–Ω–∞ (ARM)"""
        if not self.selected_drone:
            self.add_log("‚ùå –ù–µ –≤–∏–±—Ä–∞–Ω–æ –¥—Ä–æ–Ω")
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –¥—Ä–æ–Ω –∑—ñ —Å–ø–∏—Å–∫—É!")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        drone_info = self.selected_drone.replace("üöÅ ", "")
        reply = QMessageBox.question(self, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                                   f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ –≤–æ–æ—Ä—É–∂–∏—Ç–∏ –¥—Ä–æ–Ω?\n\n{drone_info}", 
                                   QMessageBox.Yes | QMessageBox.No, 
                                   QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            self.update_status("–í–æ–æ—Ä—É–∂–∞—î–º–æ –¥—Ä–æ–Ω...")
            
            if self.connected:
                # –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º MAVLink –∫–æ–º–∞–Ω–¥—É
                self.add_log(f"üî´ –†–µ–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ARM –¥–ª—è {drone_info}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è
                telemetry = self.mavlink.get_telemetry()
                if telemetry.get('armed', False):
                    self.add_log("‚ö†Ô∏è –î—Ä–æ–Ω —É–∂–µ –≤–æ–æ—Ä—É–∂–µ–Ω!")
                    QMessageBox.information(self, "–£–≤–∞–≥–∞", "–î—Ä–æ–Ω —É–∂–µ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–π!")
                    return
                
                if self.mavlink.arm_disarm(arm=True):
                    self.add_log("‚úÖ –†–µ–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ ARM –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
                else:
                    self.add_log("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ ARM")
                    QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É ARM!")
            else:
                # –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏
                if self.simulated_armed:
                    self.add_log("‚ö†Ô∏è –î—Ä–æ–Ω —É–∂–µ –≤–æ–æ—Ä—É–∂–µ–Ω (—Å–∏–º—É–ª—è—Ü—ñ—è)!")
                    QMessageBox.information(self, "–£–≤–∞–≥–∞", "–î—Ä–æ–Ω —É–∂–µ –≤–æ–æ—Ä—É–∂–µ–Ω–∏–π!")
                    return
                
                self.add_log(f"üî´ –°–∏–º—É–ª—è—Ü—ñ—è ARM –¥–ª—è {drone_info}...")
                self.simulated_armed = True
                self.add_log("‚úÖ –î—Ä–æ–Ω –≤–æ–æ—Ä—É–∂–µ–Ω (—Å–∏–º—É–ª—è—Ü—ñ—è)")
                self.update_arm_buttons_state(True)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ "–≤–æ–æ—Ä—É–∂–µ–Ω"
                QMessageBox.information(self, "–£—Å–ø—ñ—Ö", f"–î—Ä–æ–Ω {drone_info} –≤–æ–æ—Ä—É–∂–µ–Ω–∏–π!")
                self.update_status("–î—Ä–æ–Ω –≤–æ–æ—Ä—É–∂–µ–Ω–∏–π (—Å–∏–º—É–ª—è—Ü—ñ—è)")
        
    def disarm_drone(self):
        """–†–∞–∑–æ—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–æ–Ω–∞ (DISARM)"""
        if not self.selected_drone:
            self.add_log("‚ùå –ù–µ –≤–∏–±—Ä–∞–Ω–æ –¥—Ä–æ–Ω")
            QMessageBox.warning(self, "–ü–æ–º–∏–ª–∫–∞", "–°–ø–æ—á–∞—Ç–∫—É –≤–∏–±–µ—Ä—ñ—Ç—å –¥—Ä–æ–Ω –∑—ñ —Å–ø–∏—Å–∫—É!")
            return
        
        # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏—è
        drone_info = self.selected_drone.replace("üöÅ ", "")
        reply = QMessageBox.question(self, "–ü—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è", 
                                   f"–í–∏ –≤–ø–µ–≤–Ω–µ–Ω—ñ, —â–æ —Ö–æ—á–µ—Ç–µ —Ä–æ–∑–±—Ä–æ—ó—Ç–∏ –¥—Ä–æ–Ω?\n\n{drone_info}", 
                                   QMessageBox.Yes | QMessageBox.No, 
                                   QMessageBox.No)
        
        if reply == QMessageBox.Yes:
            self.update_status("–†–æ–∑–±—Ä–æ—é—î–º–æ –¥—Ä–æ–Ω...")
            
            if self.connected:
                # –†–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º MAVLink –∫–æ–º–∞–Ω–¥—É
                self.add_log(f"üõ°Ô∏è –†–µ–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ DISARM –¥–ª—è {drone_info}...")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è
                telemetry = self.mavlink.get_telemetry()
                if not telemetry.get('armed', True):
                    self.add_log("‚ö†Ô∏è –î—Ä–æ–Ω —É–∂–µ —Ä–æ–∑–±—Ä–æ—î–Ω–∏–π!")
                    QMessageBox.information(self, "–£–≤–∞–≥–∞", "–î—Ä–æ–Ω —É–∂–µ —Ä–æ–∑–±—Ä–æ—î–Ω–∏–π!")
                    return
                
                if self.mavlink.arm_disarm(arm=False):
                    self.add_log("‚úÖ –†–µ–∞–ª—å–Ω–∞ –∫–æ–º–∞–Ω–¥–∞ DISARM –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ —É—Å–ø—ñ—à–Ω–æ")
                else:
                    self.add_log("‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ —Ä–µ–∞–ª—å–Ω–æ—ó –∫–æ–º–∞–Ω–¥–∏ DISARM")
                    QMessageBox.critical(self, "–ü–æ–º–∏–ª–∫–∞", "–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –∫–æ–º–∞–Ω–¥—É DISARM!")
            else:
                # –†–µ–∂–∏–º —Å–∏–º—É–ª—è—Ü–∏–∏
                if not self.simulated_armed:
                    self.add_log("‚ö†Ô∏è –î—Ä–æ–Ω —É–∂–µ —Ä–æ–∑–±—Ä–æ—î–Ω–∏–π (—Å–∏–º—É–ª—è—Ü—ñ—è)!")
                    QMessageBox.information(self, "–£–≤–∞–≥–∞", "–î—Ä–æ–Ω —É–∂–µ —Ä–æ–∑–±—Ä–æ—î–Ω–∏–π!")
                    return
                
                self.add_log(f"üõ°Ô∏è –°–∏–º—É–ª—è—Ü—ñ—è DISARM –¥–ª—è {drone_info}...")
                self.simulated_armed = False
                self.add_log("‚úÖ –î—Ä–æ–Ω —Ä–æ–∑–±—Ä–æ—î–Ω–∏–π (—Å–∏–º—É–ª—è—Ü—ñ—è)")
                self.update_arm_buttons_state(False)  # –û–±–Ω–æ–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ "—Ä–∞–∑–æ—Ä—É–∂–µ–Ω"
                QMessageBox.information(self, "–£—Å–ø—ñ—Ö", f"–î—Ä–æ–Ω {drone_info} —Ä–æ–∑–±—Ä–æ—î–Ω–∏–π!")
                self.update_status("–î—Ä–æ–Ω —Ä–æ–∑–±—Ä–æ—î–Ω–∏–π (—Å–∏–º—É–ª—è—Ü—ñ—è)")
        
    def open_settings(self):
        """–í—ñ–¥–∫—Ä–∏—Ç—Ç—è –≤—ñ–∫–Ω–∞ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å"""
        QMessageBox.information(self, "–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è", "–í—ñ–∫–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å (–≤ —Ä–æ–∑—Ä–æ–±—Ü—ñ)")
        self.add_log("–í—ñ–¥–∫—Ä–∏—Ç–æ –≤—ñ–∫–Ω–æ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω—å")
        
    def update_telemetry(self):
        """–û–Ω–æ–≤–ª–µ–Ω–Ω—è —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó"""
        if self.connected and not self.real_telemetry:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ (–∫–æ–≥–¥–∞ –Ω–µ—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è)
            lat = round(random.uniform(49.0, 51.0), 6)
            lon = round(random.uniform(30.0, 35.0), 6)
            altitude = round(random.uniform(10, 500), 1)
            speed = round(random.uniform(0, 80), 1)
            
            self.coord_label.setText(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {lat}¬∞, {lon}¬∞")
            self.altitude_label.setText(f"–í–∏—Å–æ—Ç–∞: {altitude} –º")
            self.speed_label.setText(f"–®–≤–∏–¥–∫—ñ—Å—Ç—å: {speed} –∫–º/–≥–æ–¥")
            
            # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –±–∞—Ç–∞—Ä–µ–∏ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∂–∏–º–∞
            if self.battery_display_mode == "percent":
                battery_percent = random.randint(20, 100)
                self.battery_progress.setValue(battery_percent)
                self.battery_label.setText(f"–ë–∞—Ç–∞—Ä–µ—è: {battery_percent}%")
            else:
                # –†–µ–∂–∏–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è (–æ–±—ã—á–Ω–æ 11.1V - 16.8V –¥–ª—è Li-Po –±–∞—Ç–∞—Ä–µ–π)
                voltage = round(random.uniform(11.1, 16.8), 1)
                battery_percent = int(((voltage - 11.1) / (16.8 - 11.1)) * 100)
                self.battery_progress.setValue(battery_percent)
                self.battery_label.setText(f"–ë–∞—Ç–∞—Ä–µ—è: {voltage}V")
                
    def update_real_telemetry(self, telemetry_data):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–µ–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏ –æ—Ç MAVLink"""
        if not self.real_telemetry:
            return
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã
        lat = telemetry_data.get('lat', 0)
        lon = telemetry_data.get('lon', 0)
        if lat != 0 and lon != 0:
            self.coord_label.setText(f"–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: {lat:.6f}¬∞, {lon:.6f}¬∞")
        else:
            self.coord_label.setText("–ö–æ–æ—Ä–¥–∏–Ω–∞—Ç–∏: GPS –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∏–π")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã—Å–æ—Ç—É
        altitude = telemetry_data.get('relative_alt', 0)
        self.altitude_label.setText(f"–í–∏—Å–æ—Ç–∞: {altitude:.1f} –º")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–∫–æ—Ä–æ—Å—Ç—å
        speed = telemetry_data.get('groundspeed', 0)
        self.speed_label.setText(f"–®–≤–∏–¥–∫—ñ—Å—Ç—å: {speed:.1f} –∫–º/–≥–æ–¥")
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –±–∞—Ç–∞—Ä–µ—é
        if self.battery_display_mode == "percent":
            battery_percent = telemetry_data.get('battery_remaining', 0)
            if battery_percent > 0:
                self.battery_progress.setValue(battery_percent)
                self.battery_label.setText(f"–ë–∞—Ç–∞—Ä–µ—è: {battery_percent}%")
            else:
                self.battery_progress.setValue(0)
                self.battery_label.setText("–ë–∞—Ç–∞—Ä–µ—è: –ù/–î")
        else:
            voltage = telemetry_data.get('battery_voltage', 0)
            if voltage > 0:
                # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –≤ –ø—Ä–æ—Ü–µ–Ω—Ç—ã –¥–ª—è –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
                battery_percent = min(100, max(0, int(((voltage - 11.1) / (16.8 - 11.1)) * 100)))
                self.battery_progress.setValue(battery_percent)
                self.battery_label.setText(f"–ë–∞—Ç–∞—Ä–µ—è: {voltage:.1f}V")
            else:
                self.battery_progress.setValue(0)
                self.battery_label.setText("–ë–∞—Ç–∞—Ä–µ—è: –ù/–î")
                
        # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –ª–æ–≥–∏
        mode = telemetry_data.get('mode', 'UNKNOWN')
        armed = telemetry_data.get('armed', False)
        gps_sats = telemetry_data.get('satellites', 0)
        
        status_info = f"–†–µ–∂–∏–º: {mode} | –û–∑–±—Ä–æ—î–Ω–∏–π: {'–¢–∞–∫' if armed else '–ù—ñ'} | GPS —Å–∞—Ç: {gps_sats}"
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∏–∑–º–µ–Ω–µ–Ω–∏—è
        if hasattr(self, 'last_status_info') and self.last_status_info != status_info:
            self.add_log(f"üìä {status_info}")
        self.last_status_info = status_info
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ARM/DISARM –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è
        self.update_arm_buttons_state(armed)
        
    def on_mavlink_connection_changed(self, connected):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è MAVLink –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if not connected and self.connected:
            # –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ –ø–æ—Ç–µ—Ä—è–Ω–æ
            self.connected = False
            self.real_telemetry = False
            self.update_connection_indicator(False)
            self.update_status("–ó'—î–¥–Ω–∞–Ω–Ω—è –≤—Ç—Ä–∞—á–µ–Ω–æ")
            self.add_log("‚ùå –ó'—î–¥–Ω–∞–Ω–Ω—è –∑ –¥—Ä–æ–Ω–æ–º –≤—Ç—Ä–∞—á–µ–Ω–æ")
            
            # –û—á–∏—â–∞—î–º–æ —Å–ø–∏—Å–æ–∫ –¥—Ä–æ–Ω—ñ–≤
            self.connected_drones.clear()
            self.update_drones_list()
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–º –¥–∞–Ω–Ω—ã–º
            self.timer.start(1000)
            
    def update_status(self, status):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞"""
        # statusLabel —Å–∫—Ä—ã—Ç, –ø–æ—ç—Ç–æ–º—É –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –ª–æ–≥–∏
        self.add_log(f"–°—Ç–∞—Ç—É—Å: {status}")
        
    def update_connection_indicator(self, connected):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        if connected:
            self.connection_status_button.setText("‚óè –ü–Ü–î–ö–õ–Æ–ß–ï–ù–û")
            self.connection_status_button.setStyleSheet("""
                QPushButton {
                    background-color: #4CAF50;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    padding: 10px 15px;
                    font-size: 14pt;
                    font-weight: bold;
                    margin: 5px;
                    max-width: 180px;
                    min-width: 140px;
                }
            """)
        else:
            self.connection_status_button.setText("‚óè –í–Ü–î–ö–õ–Æ–ß–ï–ù–û")
            self.connection_status_button.setStyleSheet("""
                QPushButton {
                    background-color: #d32f2f;
                    color: white;
                    border: none;
                    border-radius: 8px;
                    padding: 10px 15px;
                    font-size: 14pt;
                    font-weight: bold;
                    margin: 5px;
                    max-width: 180px;
                    min-width: 140px;
                }
            """)
        
        # –ö–Ω–æ–ø–∫–∏ ARM/DISARM —Ç–µ–ø–µ—Ä—å —É–ø—Ä–∞–≤–ª—è—é—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ —á–µ—Ä–µ–∑ –≤—ã–±–æ—Ä –¥—Ä–æ–Ω–∞
    
    def enable_arm_disarm_buttons(self, enabled):
        """–í–∫–ª—é—á–µ–Ω–∏–µ/–æ—Ç–∫–ª—é—á–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ ARM/DISARM"""
        if hasattr(self, 'armButton') and hasattr(self, 'disarmButton') and hasattr(self, 'arm_active_style'):
            self.add_log(f"üîß –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∫–Ω–æ–ø–æ–∫ ARM/DISARM: enabled={enabled}")
            
            if enabled:
                # –ö–Ω–æ–ø–∫–∏ –¥–æ—Å—Ç—É–ø–Ω—ã, –Ω–æ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∑–∞–≤–∏—Å–∏—Ç –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è
                # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –¥—Ä–æ–Ω —Ä–∞–∑–æ—Ä—É–∂–µ–Ω, –ø–æ—ç—Ç–æ–º—É ARM –∞–∫—Ç–∏–≤–Ω–∞, DISARM –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
                self.armButton.setEnabled(True)
                self.disarmButton.setEnabled(False)
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å !important
                self.armButton.setStyleSheet(self.arm_active_style)
                self.disarmButton.setStyleSheet(self.inactive_style)
                
                self.add_log("‚úÖ ARM –∞–∫—Ç–∏–≤–Ω–∞ (–∑–µ–ª–µ–Ω–∞), DISARM –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞ (—Å—ñ—Ä–∞)")
                
            else:
                # –ö–Ω–æ–ø–∫–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã
                self.armButton.setEnabled(False)
                self.disarmButton.setEnabled(False)
                
                # –û–±–µ –∫–Ω–æ–ø–∫–∏ –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã
                self.armButton.setStyleSheet(self.inactive_style)
                self.disarmButton.setStyleSheet(self.inactive_style)
        else:
            self.add_log("‚ùå –ü–û–ú–ò–õ–ö–ê: –ö–Ω–æ–ø–∫–∏ ARM/DISARM –∞–±–æ —Å—Ç–∏–ª—ñ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ!")
    
    def update_arm_buttons_state(self, armed):
        """–û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∫–Ω–æ–ø–æ–∫ ARM/DISARM –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Å—Ç–∞—Ç—É—Å–∞ –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è"""
        if not hasattr(self, 'armButton') or not hasattr(self, 'disarmButton'):
            return
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ä–µ–∞–ª—å–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ò–õ–ò –≤—ã–±—Ä–∞–Ω –¥—Ä–æ–Ω, –∫–Ω–æ–ø–∫–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∞–∫—Ç–∏–≤–Ω—ã
        if not self.connected and not self.selected_drone:
            self.add_log("‚ö†Ô∏è –ö–Ω–æ–ø–∫–∏ –¥–µ–∞–∫—Ç–∏–≤–æ–≤–∞–Ω—ñ: –Ω–µ–º–∞—î –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è —Ç–∞ –Ω–µ –≤–∏–±—Ä–∞–Ω–æ –¥—Ä–æ–Ω")
            self.armButton.setEnabled(False)
            self.disarmButton.setEnabled(False)
            return
            
        if armed:
            # –î—Ä–æ–Ω –≤–æ–æ—Ä—É–∂–µ–Ω - ARM –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞, DISARM –∞–∫—Ç–∏–≤–Ω–∞
            self.armButton.setEnabled(False)
            self.disarmButton.setEnabled(True)
            
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
            self.armButton.setText("üî´ –í–û–û–†–£–ñ–ï–ù–û")
            self.disarmButton.setText("üõ°Ô∏è DISARM")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏
            self.armButton.setStyleSheet(self.inactive_style)
            self.disarmButton.setStyleSheet(self.disarm_active_style)
        else:
            # –î—Ä–æ–Ω —Ä–∞–∑–æ—Ä—É–∂–µ–Ω - ARM –∞–∫—Ç–∏–≤–Ω–∞, DISARM –Ω–µ–∞–∫—Ç–∏–≤–Ω–∞
            self.armButton.setEnabled(True)
            self.disarmButton.setEnabled(False)
            
            # –í–∏–∑—É–∞–ª—å–Ω–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è
            self.armButton.setText("üî´ ARM")
            self.disarmButton.setText("üõ°Ô∏è –†–û–ó–ë–†–û–Ñ–ù–û")
            
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä–µ–¥–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã–µ —Å—Ç–∏–ª–∏ —Å !important
            self.armButton.setStyleSheet(self.arm_active_style)
            self.disarmButton.setStyleSheet(self.inactive_style)
            
        # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        self.armButton.update()
        self.disarmButton.update()
        
    def add_log(self, message):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –ª–æ–≥"""
        timestamp = datetime.datetime.now().strftime("%H:%M:%S")
        log_entry = f"[{timestamp}] {message}"
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –Ω–æ–≤—ã–π QPlainTextEdit –∏–∑ UI
        if hasattr(self, 'logsTextEdit'):
            self.logsTextEdit.appendPlainText(log_entry)
            
            # –ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –≤–Ω–∏–∑
            scrollbar = self.logsTextEdit.verticalScrollBar()
            scrollbar.setValue(scrollbar.maximum())
        else:
            print(f"Log: {log_entry}")  # Fallback –≤ –∫–æ–Ω—Å–æ–ª—å –µ—Å–ª–∏ –≤–∏–¥–∂–µ—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω

class ConnectionDialog(QDialog):
    def __init__(self, parent=None):
        super().__init__(parent)
        self.setWindowTitle("–ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ –¥—Ä–æ–Ω–∞")
        self.setFixedSize(500, 450)  # –ó–±—ñ–ª—å—à–µ–Ω–æ –∑ 400x300 –¥–æ 500x450
        self.setStyleSheet("""
            QDialog {
                background-color: #0f1619;
                color: #dbe7f3;
                font-family: "Inter", "Roboto", "Segoe UI", sans-serif;
            }
            QLabel {
                color: #dbe7f3;
                font-size: 12pt;
                margin: 5px;
            }
            QComboBox, QLineEdit, QSpinBox {
                background-color: #1e2a30;
                color: #dbe7f3;
                border: 1px solid rgba(255,255,255,0.1);
                border-radius: 6px;
                padding: 8px;
                font-size: 12pt;
                min-height: 30px;
            }
            QPushButton {
                background-color: #1e2a30;
                color: #dbe7f3;
                border: 1px solid rgba(255,255,255,0.1);
                border-radius: 8px;
                padding: 8px 16px;
                font-size: 12pt;
            }
            QPushButton:hover {
                background-color: #26343d;
            }
            QPushButton:pressed {
                background-color: #1a2429;
            }
        """)
        
        self.setup_ui()
        
    def setup_ui(self):
        layout = QVBoxLayout(self)
        layout.setSpacing(20)  # –ó–±—ñ–ª—å—à–µ–Ω–æ –≤—ñ–¥—Å—Ç—É–ø–∏
        layout.setContentsMargins(25, 25, 25, 25)  # –ó–±—ñ–ª—å—à–µ–Ω–æ –ø–æ–ª—è
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        title = QLabel("üîó –ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è MAVLink")
        title.setStyleSheet("font-size: 18pt; font-weight: bold; color: #e6f0fa; margin-bottom: 15px;")
        layout.addWidget(title)
        
        # –ü—Ä–æ—Ç–æ–∫–æ–ª
        protocol_layout = QHBoxLayout()
        protocol_layout.addWidget(QLabel("–ü—Ä–æ—Ç–æ–∫–æ–ª:"))
        self.protocol_combo = QComboBox()
        self.protocol_combo.addItems(["UDP", "TCP"])
        self.protocol_combo.setCurrentText("TCP")  # –î–µ—Ñ–æ–ª—Ç TCP
        protocol_layout.addWidget(self.protocol_combo)
        layout.addLayout(protocol_layout)
        
        # –•–æ—Å—Ç
        host_layout = QHBoxLayout()
        host_layout.addWidget(QLabel("IP –∞–¥—Ä–µ—Å–∞:"))
        self.host_input = QLineEdit("192.168.1.118")  # –î–µ—Ñ–æ–ª—Ç IP –¥—Ä–æ–Ω–∞
        self.host_input.setPlaceholderText("–í–≤–µ–¥—ñ—Ç—å IP –∞–¥—Ä–µ—Å—É –¥—Ä–æ–Ω–∞")
        host_layout.addWidget(self.host_input)
        layout.addLayout(host_layout)
        
        # –ü–æ—Ä—Ç
        port_layout = QHBoxLayout()
        port_layout.addWidget(QLabel("–ü–æ—Ä—Ç:"))
        self.port_input = QSpinBox()
        self.port_input.setRange(1, 65535)
        self.port_input.setValue(5760)  # –î–µ—Ñ–æ–ª—Ç –ø–æ—Ä—Ç –¥—Ä–æ–Ω–∞
        port_layout.addWidget(self.port_input)
        layout.addLayout(port_layout)
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–∫–∏
        presets_layout = QVBoxLayout()
        presets_label = QLabel("üìã –ì–æ—Ç–æ–≤—ñ –Ω–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è:")
        presets_label.setStyleSheet("font-weight: bold; margin-top: 10px;")
        presets_layout.addWidget(presets_label)
        
        preset_buttons_layout = QHBoxLayout()
        preset_buttons_layout.setSpacing(10)
        
        mission_button = QPushButton("Mission Planner")
        mission_button.setStyleSheet("min-height: 35px; font-size: 11pt; padding: 8px;")
        mission_button.setToolTip("UDP 127.0.0.1:14551")
        mission_button.clicked.connect(lambda: self.set_preset("127.0.0.1", 14551, "UDP"))
        
        sitl_button = QPushButton("SITL")
        sitl_button.setStyleSheet("min-height: 35px; font-size: 11pt; padding: 8px;")
        sitl_button.setToolTip("TCP 127.0.0.1:5760")
        sitl_button.clicked.connect(lambda: self.set_preset("127.0.0.1", 5760, "TCP"))
        
        preset_buttons_layout.addWidget(mission_button)
        preset_buttons_layout.addWidget(sitl_button)
        
        presets_layout.addLayout(preset_buttons_layout)
        layout.addLayout(presets_layout)
        
        # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
        info_label = QLabel("""
‚ÑπÔ∏è –Ü–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—è:
‚Ä¢ UDP 14550 - —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∏–π –ø–æ—Ä—Ç QGroundControl
‚Ä¢ UDP 14551 - Mission Planner
‚Ä¢ TCP 5760 - SITL —Å–∏–º—É–ª—è—Ç–æ—Ä
‚Ä¢ –î–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –¥—Ä–æ–Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ –π–æ–≥–æ IP""")
        info_label.setStyleSheet("font-size: 10pt; color: #a0a0a0; margin: 10px 0;")
        info_label.setWordWrap(True)
        layout.addWidget(info_label)
        
        # –ö–Ω–æ–ø–∫–∏
        buttons_layout = QHBoxLayout()
        buttons_layout.setSpacing(15)  # –í—ñ–¥—Å—Ç—É–ø –º—ñ–∂ –∫–Ω–æ–ø–∫–∞–º–∏
        
        connect_button = QPushButton("üîó –ü—ñ–¥–∫–ª—é—á–∏—Ç–∏—Å—è")
        connect_button.setStyleSheet("""
            QPushButton {
                background-color: #4CAF50; 
                font-weight: bold;
                font-size: 14pt;
                padding: 12px 20px;
                min-height: 45px;
            }
        """)
        connect_button.clicked.connect(self.accept)
        
        cancel_button = QPushButton("‚ùå –°–∫–∞—Å—É–≤–∞—Ç–∏")
        cancel_button.setStyleSheet("""
            QPushButton {
                font-size: 14pt;
                padding: 12px 20px;
                min-height: 45px;
            }
        """)
        cancel_button.clicked.connect(self.reject)
        
        buttons_layout.addWidget(cancel_button)
        buttons_layout.addWidget(connect_button)
        layout.addLayout(buttons_layout)
        
    def set_preset(self, host, port, protocol):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π"""
        self.host_input.setText(host)
        self.port_input.setValue(port)
        self.protocol_combo.setCurrentText(protocol)
        
    def get_connection_params(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        return (
            self.protocol_combo.currentText(),
            self.host_input.text().strip(),
            self.port_input.value()
        )

def main():
    app = QApplication(sys.argv)
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å—Ç–∏–ª—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    app.setStyle('Fusion')
    
    # –°–æ–∑–¥–∞–µ–º –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–∫–Ω–æ
    window = DroneControlApp()
    window.show()
    
    sys.exit(app.exec_())

if __name__ == '__main__':
    main()