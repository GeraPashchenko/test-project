import socket
import threading
import time
from pymavlink import mavutil
from PyQt5.QtCore import QObject, pyqtSignal

class MAVLinkConnection(QObject):
    # –°–∏–≥–Ω–∞–ª—ã –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è UI
    telemetry_updated = pyqtSignal(dict)
    connection_status_changed = pyqtSignal(bool)
    message_received = pyqtSignal(str)
    
    def __init__(self):
        super().__init__()
        self.connection = None
        self.connected = False
        self.running = False
        self.thread = None
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        self.connection_string = "tcp:192.168.1.118:5760"  # –†–µ–∞–ª—å–Ω—ã–π –¥—Ä–æ–Ω
        self.protocol = "TCP"  # UDP –∏–ª–∏ TCP
        self.host = "192.168.1.118"
        self.port = 5760
        
        # –î–∞–Ω–Ω—ã–µ —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏
        self.telemetry_data = {
            'lat': 0.0,
            'lon': 0.0,
            'alt': 0.0,
            'relative_alt': 0.0,
            'heading': 0.0,
            'groundspeed': 0.0,
            'airspeed': 0.0,
            'battery_voltage': 0.0,
            'battery_current': 0.0,
            'battery_remaining': 0,
            'mode': 'UNKNOWN',
            'armed': False,
            'gps_fix': 0,
            'satellites': 0
        }
    
    def set_connection_params(self, protocol, host, port):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è"""
        self.protocol = protocol
        self.host = host
        self.port = port
        
        if protocol == "UDP":
            self.connection_string = f"udpin:{host}:{port}"
        elif protocol == "TCP":
            self.connection_string = f"tcp:{host}:{port}"
        
        self.message_received.emit(f"–ü–∞—Ä–∞–º–µ—Ç—Ä–∏ –∑'—î–¥–Ω–∞–Ω–Ω—è: {protocol}://{host}:{port}")
    
    def connect(self):
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –¥—Ä–æ–Ω—É"""
        try:
            self.message_received.emit(f"–ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –¥–æ {self.connection_string}...")
            
            # –°–æ–∑–¥–∞–µ–º MAVLink —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            self.connection = mavutil.mavlink_connection(
                self.connection_string,
                baud=57600,
                source_system=255,
                source_component=0
            )
            
            # –ñ–¥–µ–º –ø–µ—Ä–≤–æ–µ heartbeat —Å–æ–æ–±—â–µ–Ω–∏–µ
            self.message_received.emit("–û—á—ñ–∫—É–≤–∞–Ω–Ω—è heartbeat...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ—Ç–æ–∫ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
            self.running = True
            self.thread = threading.Thread(target=self._receive_loop, daemon=True)
            self.thread.start()
            
            # –ñ–¥–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è (–º–∞–∫—Å–∏–º—É–º 10 —Å–µ–∫—É–Ω–¥)
            start_time = time.time()
            while not self.connected and (time.time() - start_time) < 10:
                time.sleep(0.1)
            
            if self.connected:
                self.message_received.emit("‚úÖ –ü—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!")
                self.connection_status_changed.emit(True)
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ—Ç–æ–∫ –¥–∞–Ω–Ω—ã—Ö
                self._request_data_stream()
                return True
            else:
                self.message_received.emit("‚ùå –¢–∞–π–º–∞—É—Ç –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è")
                self.disconnect()
                return False
                
        except Exception as e:
            self.message_received.emit(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—ñ–¥–∫–ª—é—á–µ–Ω–Ω—è: {str(e)}")
            self.disconnect()
            return False
    
    def disconnect(self):
        """–û—Ç–∫–ª—é—á–µ–Ω–∏–µ –æ—Ç –¥—Ä–æ–Ω–∞"""
        self.running = False
        self.connected = False
        
        if self.connection:
            try:
                self.connection.close()
            except:
                pass
            self.connection = None
        
        if self.thread and self.thread.is_alive():
            self.thread.join(timeout=2)
        
        self.connection_status_changed.emit(False)
        self.message_received.emit("üì° –í—ñ–¥–∫–ª—é—á–µ–Ω–æ –≤—ñ–¥ –¥—Ä–æ–Ω–∞")
    
    def _receive_loop(self):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö"""
        while self.running and self.connection:
            try:
                # –ü–æ–ª—É—á–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–∞—É—Ç–æ–º
                msg = self.connection.recv_match(blocking=True, timeout=1)
                
                if msg is None:
                    continue
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º heartbeat
                if msg.get_type() == 'HEARTBEAT':
                    if not self.connected:
                        self.connected = True
                        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º target_system –∏ target_component –∏–∑ heartbeat
                        if hasattr(self.connection, 'target_system') and self.connection.target_system is None:
                            self.connection.target_system = msg.get_srcSystem()
                            self.connection.target_component = msg.get_srcComponent()
                        
                        self.message_received.emit(f"üíì Heartbeat –≤—ñ–¥ system={msg.get_srcSystem()}, component={msg.get_srcComponent()}")
                        self.message_received.emit(f"üéØ Target –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: system={self.connection.target_system}, component={self.connection.target_component}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∂–∏–º –∏ —Å—Ç–∞—Ç—É—Å –≤–æ–æ—Ä—É–∂–µ–Ω–∏—è
                    self.telemetry_data['mode'] = mavutil.mode_string_v10(msg)
                    self.telemetry_data['armed'] = bool(msg.base_mode & mavutil.mavlink.MAV_MODE_FLAG_SAFETY_ARMED)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GPS –¥–∞–Ω–Ω—ã–µ
                elif msg.get_type() == 'GLOBAL_POSITION_INT':
                    self.telemetry_data['lat'] = msg.lat / 1e7
                    self.telemetry_data['lon'] = msg.lon / 1e7
                    self.telemetry_data['alt'] = msg.alt / 1000.0
                    self.telemetry_data['relative_alt'] = msg.relative_alt / 1000.0
                    self.telemetry_data['heading'] = msg.hdg / 100.0
                    
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å–∫–æ—Ä–æ—Å—Ç–∏
                elif msg.get_type() == 'VFR_HUD':
                    self.telemetry_data['groundspeed'] = msg.groundspeed
                    self.telemetry_data['airspeed'] = msg.airspeed
                    self.telemetry_data['heading'] = msg.heading
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –±–∞—Ç–∞—Ä–µ–∏
                elif msg.get_type() == 'SYS_STATUS':
                    self.telemetry_data['battery_voltage'] = msg.voltage_battery / 1000.0
                    self.telemetry_data['battery_current'] = msg.current_battery / 100.0
                    self.telemetry_data['battery_remaining'] = msg.battery_remaining
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º GPS —Å—Ç–∞—Ç—É—Å
                elif msg.get_type() == 'GPS_RAW_INT':
                    self.telemetry_data['gps_fix'] = msg.fix_type
                    self.telemetry_data['satellites'] = msg.satellites_visible
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤ UI
                self.telemetry_updated.emit(self.telemetry_data.copy())
                
            except Exception as e:
                if self.running:
                    self.message_received.emit(f"–ü–æ–º–∏–ª–∫–∞ –æ—Ç—Ä–∏–º–∞–Ω–Ω—è –¥–∞–Ω–∏—Ö: {str(e)}")
                break
    
    def _request_data_stream(self):
        """–ó–∞–ø—Ä–æ—Å –ø–æ—Ç–æ–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ—Ç –¥—Ä–æ–Ω–∞"""
        if not self.connection:
            return
        
        # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ —á—Ç–æ–±—ã target_system –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        time.sleep(0.5)
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ target_system —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not hasattr(self.connection, 'target_system') or self.connection.target_system is None:
                self.message_received.emit("‚ö†Ô∏è target_system –Ω–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ, –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î–º–æ 1")
                self.connection.target_system = 1
                self.connection.target_component = 1
            
            self.message_received.emit(f"üìä –ó–∞–ø–∏—Ç—É—î–º–æ –ø–æ—Ç—ñ–∫ –¥–∞–Ω–∏—Ö –≤—ñ–¥ system={self.connection.target_system}")
            
            # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑–ª–∏—á–Ω—ã–µ –ø–æ—Ç–æ–∫–∏ –¥–∞–Ω–Ω—ã—Ö
            data_streams = [
                mavutil.mavlink.MAV_DATA_STREAM_ALL,
                mavutil.mavlink.MAV_DATA_STREAM_POSITION,
                mavutil.mavlink.MAV_DATA_STREAM_RAW_SENSORS,
                mavutil.mavlink.MAV_DATA_STREAM_EXTENDED_STATUS,
            ]
            
            for stream in data_streams:
                self.connection.mav.request_data_stream_send(
                    self.connection.target_system,
                    self.connection.target_component,
                    stream,
                    1,  # –ß–∞—Å—Ç–æ—Ç–∞ 1 Hz
                    1   # –í–∫–ª—é—á–∏—Ç—å
                )
            
            self.message_received.emit("‚úÖ –ü–æ—Ç—ñ–∫ —Ç–µ–ª–µ–º–µ—Ç—Ä—ñ—ó –∑–∞–ø–∏—Ç–∞–Ω–æ")
            
        except Exception as e:
            self.message_received.emit(f"–ü–æ–º–∏–ª–∫–∞ –∑–∞–ø–∏—Ç—É –¥–∞–Ω–∏—Ö: {str(e)}")
    
    def send_command(self, command, param1=0, param2=0, param3=0, param4=0, param5=0, param6=0, param7=0):
        """–û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥—Ä–æ–Ω—É"""
        if not self.connected or not self.connection:
            self.message_received.emit("‚ùå –ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥")
            return False
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
            command_name = mavutil.mavlink.enums['MAV_CMD'][command].name if command in mavutil.mavlink.enums['MAV_CMD'] else f"CMD_{command}"
            self.message_received.emit(f"üì§ –í—ñ–¥–ø—Ä–∞–≤–ª—è—î–º–æ {command_name} –∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {param1}, {param2}, {param3}...")
            
            self.connection.mav.command_long_send(
                self.connection.target_system,
                self.connection.target_component,
                command,
                0,  # confirmation
                param1, param2, param3, param4, param5, param6, param7
            )
            
            self.message_received.emit(f"‚úÖ {command_name} –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ target_system={self.connection.target_system}")
            return True
            
        except Exception as e:
            self.message_received.emit(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –≤—ñ–¥–ø—Ä–∞–≤–∫–∏ –∫–æ–º–∞–Ω–¥–∏: {str(e)}")
            return False
    
    def arm_disarm(self, arm=True):
        """–í–æ–æ—Ä—É–∂–µ–Ω–∏–µ/—Ä–∞–∑–æ—Ä—É–∂–µ–Ω–∏–µ –¥—Ä–æ–Ω–∞"""
        if not self.connected or not self.connection:
            self.message_received.emit("‚ùå –ù–µ–º–∞—î –∑'—î–¥–Ω–∞–Ω–Ω—è –¥–ª—è ARM/DISARM")
            return False
            
        param1 = 1 if arm else 0
        action = "–≤–æ–æ—Ä—É–∂–µ–Ω–∏–µ" if arm else "—Ä–∞–∑–æ—Ä—É–∂–µ–Ω–∏–µ"
        
        self.message_received.emit(f"üî´ –ö–æ–º–∞–Ω–¥–∞ {action}...")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É ARM/DISARM —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
            self.connection.mav.command_long_send(
                self.connection.target_system,
                self.connection.target_component,
                mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM,
                0,  # confirmation
                param1,  # arm/disarm (1/0)
                0,      # param2 - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                0,      # param3 - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è  
                0,      # param4 - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                0,      # param5 - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                0,      # param6 - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
                0       # param7 - –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è
            )
            
            self.message_received.emit(f"üì§ ARM/DISARM –∫–æ–º–∞–Ω–¥–∞ –≤—ñ–¥–ø—Ä–∞–≤–ª–µ–Ω–∞: {param1}")
            
            # –ñ–¥–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ—Ç –∞–≤—Ç–æ–ø–∏–ª–æ—Ç–∞
            start_time = time.time()
            timeout = 3.0  # 3 —Å–µ–∫—É–Ω–¥—ã –Ω–∞ –æ—Ç–≤–µ—Ç
            
            while time.time() - start_time < timeout:
                msg = self.connection.recv_match(type='COMMAND_ACK', blocking=False, timeout=0.1)
                if msg and msg.command == mavutil.mavlink.MAV_CMD_COMPONENT_ARM_DISARM:
                    if msg.result == mavutil.mavlink.MAV_RESULT_ACCEPTED:
                        self.message_received.emit(f"‚úÖ ARM/DISARM –∫–æ–º–∞–Ω–¥–∞ –ø—Ä–∏–π–Ω—è—Ç–∞ –∞–≤—Ç–æ–ø—ñ–ª–æ—Ç–æ–º")
                        return True
                    else:
                        result_name = mavutil.mavlink.enums['MAV_RESULT'].get(msg.result, {}).get('name', f"RESULT_{msg.result}")
                        self.message_received.emit(f"‚ùå ARM/DISARM –∫–æ–º–∞–Ω–¥–∞ –≤—ñ–¥—Ö–∏–ª–µ–Ω–∞: {result_name}")
                        return False
                        
                time.sleep(0.1)
            
            self.message_received.emit(f"‚ö†Ô∏è –ù–µ–º–∞—î –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ –Ω–∞ ARM/DISARM –∫–æ–º–∞–Ω–¥—É (timeout)")
            return False
            
        except Exception as e:
            self.message_received.emit(f"‚ùå –ü–æ–º–∏–ª–∫–∞ ARM/DISARM: {str(e)}")
            return False
    
    def takeoff(self, altitude=10):
        """–ö–æ–º–∞–Ω–¥–∞ –≤–∑–ª–µ—Ç–∞"""
        self.message_received.emit(f"üöÅ –ö–æ–º–∞–Ω–¥–∞ –∑–ª—å–æ—Ç—É –Ω–∞ –≤–∏—Å–æ—Ç—É {altitude}–º...")
        return self.send_command(
            mavutil.mavlink.MAV_CMD_NAV_TAKEOFF,
            param7=altitude
        )
    
    def land(self):
        """–ö–æ–º–∞–Ω–¥–∞ –ø–æ—Å–∞–¥–∫–∏"""
        self.message_received.emit("üõ¨ –ö–æ–º–∞–Ω–¥–∞ –ø–æ—Å–∞–¥–∫–∏...")
        return self.send_command(mavutil.mavlink.MAV_CMD_NAV_LAND)
    
    def set_mode(self, mode_name):
        """–£—Å—Ç–∞–Ω–æ–≤–∫–∞ —Ä–µ–∂–∏–º–∞ –ø–æ–ª–µ—Ç–∞"""
        try:
            mode_id = self.connection.mode_mapping()[mode_name.upper()]
            self.connection.set_mode(mode_id)
            self.message_received.emit(f"‚úàÔ∏è –ó–º—ñ–Ω–∞ —Ä–µ–∂–∏–º—É –Ω–∞: {mode_name}")
            return True
        except Exception as e:
            self.message_received.emit(f"‚ùå –ü–æ–º–∏–ª–∫–∞ –∑–º—ñ–Ω–∏ —Ä–µ–∂–∏–º—É: {str(e)}")
            return False
    
    def get_telemetry(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Ç–µ–ª–µ–º–µ—Ç—Ä–∏–∏"""
        return self.telemetry_data.copy()